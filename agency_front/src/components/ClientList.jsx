import React, { useEffect, useState, useCallback, useMemo } from 'react';
import {
    getClientsByManager,
    getHousingPreferences,
    updateClient,
    deleteClient,
    updatePreferences
} from '../api/ClientService';
import { getRequestsByManager } from '../api/accessProperty';
import { getPropertyEnums } from '../api/propertyService';
import "../styles/ClientList.css";
import PreferenceEditModal from "./Layout/PreferenceEditModal";

const ClientList = ({ managerId }) => {
    const [clients, setClients] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [expandedClientId, setExpandedClientId] = useState(null);
    const [editingClient, setEditingClient] = useState(null);
    const [statusList, setStatusList] = useState([]);
    const [editingPref, setEditingPref] = useState(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [preferencesData, setPreferencesData] = useState(null);

    const handleEditClick = (preference) => {
        setPreferencesData(prev => ({
            ...preference,
            clientId: expandedClientId // –∏–ª–∏ client.id, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        }));
        setIsModalOpen(true);
    };


    //

    useEffect(() => {
        const fetchClients = async () => {
            try {
                const clientData = await getClientsByManager(managerId);
                const enriched = clientData.map(c => ({ ...c, preferences: null, loadingPreferences: false }));
                setClients(enriched);
            } catch (err) {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤');
            } finally {
                setLoading(false);
            }
        };

        if (managerId) fetchClients();
    }, [managerId]);

    useEffect(() => {
        const fetchEnums = async () => {
            try {
                const [_, enums] = await Promise.all([
                    getRequestsByManager(managerId),
                    getPropertyEnums()
                ]);
                setStatusList(enums.accessLevel || []);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤:', err);
            }
        };

        fetchEnums();
    }, [managerId]);

    const handleDeleteClient = async (clientId) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?')) {
            return;
        }

        try {
            await deleteClient(clientId);
            setClients((prevClients) => prevClients.filter((client) => client.id !== clientId));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
            if (error.response) {
                // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                console.error('–û—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º:', error.response.data);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
            } else if (error.request) {
                // –û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º
                console.error('–û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º:', error.request);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –û—à–∏–±–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º.');
            } else {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                console.error('–û—à–∏–±–∫–∞:', error.message);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        }
    };



    const loadPreferences = useCallback(async (clientId) => {
        setClients(prev =>
            prev.map(c => c.id === clientId ? { ...c, loadingPreferences: true } : c)
        );
        try {
            const prefs = await getHousingPreferences(clientId);
            setClients(prev =>
                prev.map(c => c.id === clientId ? { ...c, preferences: prefs, loadingPreferences: false } : c)
            );
        } catch {
            setClients(prev =>
                prev.map(c => c.id === clientId ? { ...c, preferences: [], loadingPreferences: false } : c)
            );
        }
    }, []);

    const togglePreferences = (clientId) => {
        if (expandedClientId === clientId) {
            setExpandedClientId(null);
        } else {
            setExpandedClientId(clientId);
            const client = clients.find(c => c.id === clientId);
            if (!client.preferences) loadPreferences(clientId);
        }
    };


    const handleEditField = (fieldPath, value) => {
        const updated = { ...editingClient };
        if (fieldPath.startsWith("authUser.")) {
            updated.authUser = { ...updated.authUser, [fieldPath.split(".")[1]]: value };
        } else {
            updated[fieldPath] = value;
        }
        setEditingClient(updated);
    };

    const handleUpdateClient = async (e) => {
        e.preventDefault();

        const dto = {
            accessLevel: editingClient.accessLevel,
            phone: editingClient.phone,
            passport: editingClient.passport,
            email: editingClient.authUser.email,
            firstname: editingClient.authUser.firstname,
            lastname: editingClient.authUser.lastname,
            password: editingClient.authUser.password,
        };

        try {
            const updated = await updateClient(editingClient.id, dto);
            setClients(prev =>
                prev.map(c =>
                    c.id === updated.id ? { ...updated, preferences: c.preferences } : c
                )
            );
            setEditingClient(null);
        } catch (err) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞');
        }
    };

    if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</div>;
    if (error) return <div className="error">{error}</div>;

    return (

        <div className="clients-preferences-table">
            <h2 className="client-preferenses">–ö–ª–∏–µ–Ω—Ç—ã –∏ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h2>
            <table>
                <thead>
                <tr>
                    <th>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</th>
                    <th>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
                </thead>
                <tbody>
                {clients.map(client => (
                    <React.Fragment key={client.id}>
                        <tr className="client-row" onClick={() => togglePreferences(client.id)}>
                            <td>
                                <div><strong>–ò–º—è:</strong> {client.authUser.firstname}</div>
                                <div><strong>–§–∞–º–∏–ª–∏—è:</strong> {client.authUser.lastname}</div>
                                <div><strong>Email:</strong> {client.authUser.email}</div>
                                <div><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {client.phone}</div>
                                <div><strong>–ü–∞—Å–ø–æ—Ä—Ç:</strong> {client.passport || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                                <div><strong>–î–æ—Å—Ç—É–ø:</strong> {client.accessLevel}</div>
                            </td>
                            <td>
                                {client.loadingPreferences
                                    ? '–ó–∞–≥—Ä—É–∑–∫–∞...'
                                    : client.preferences
                                        ? `–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${client.preferences.length}`
                                        : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
                            </td>
                            <td>
                                <button className="edit-button" onClick={(e) => {
                                    e.stopPropagation();
                                    setEditingClient({ ...client });
                                }}>
                                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                                <button className="delite-button"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleDeleteClient(client.id);
                                    }}
                                    style={{ marginLeft: '10px', color: 'white' }}
                                >
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>


                            </td>
                        </tr>

                        {expandedClientId === client.id && client.preferences && (
                            <tr className="preferences-details">
                                <td colSpan="3">

                                    {client.preferences.length > 0 ? client.preferences.map((pref, index) => (
                                        <div key={index} className="preference-item">
                                            <h4>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ #{index + 1}</h4>
                                            <div><strong>–ì–æ—Ä–æ–¥:</strong> {pref.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                                            <div><strong>–†–∞–π–æ–Ω:</strong> {pref.district || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
                                            <div><strong>–£–ª–∏—Ü–∞:</strong> {pref.street || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                                            <div><strong>–ü–ª–æ—â–∞–¥—å:</strong> {pref.minArea || '?'} - {pref.maxArea || '?'} –º¬≤</div>
                                            <div><strong>–¶–µ–Ω–∞:</strong> {pref.minPrice || '?'} - {pref.maxPrice || '?'}</div>
                                            <div><strong>–ö–æ–º–Ω–∞—Ç:</strong> {pref.roomsCount || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                                            <div><strong>–ë–∞–ª–∫–æ–Ω:</strong> {pref.hasBalcony ? '–¥–∞' : '–Ω–µ—Ç'}</div>
                                            <div><strong>–ñ–∏–≤–æ—Ç–Ω—ã–µ:</strong> {pref.allowPets ? '—Ä–∞–∑—Ä–µ—à–µ–Ω—ã' : '–Ω–µ—Ç'}</div>
                                            <div><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong> {pref.additionalNotes || '–Ω–µ—Ç'}</div>
                                            <button
                                                onClick={() => handleEditClick(pref)}
                                                style={{ marginTop: '10px' }}
                                            >
                                                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ
                                            </button>

                                            {isModalOpen && preferencesData && (
                                                <PreferenceEditModal
                                                    preference={preferencesData}
                                                    onClose={() => setIsModalOpen(false)}
                                                    onSave={async (updatedPref) => {
                                                        try {
                                                            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ:", updatedPref);
                                                            console.log("clientId:", preferencesData.clientId);
                                                            console.log("prefId:", preferencesData.id);
                                                            await updatePreferences(preferencesData.clientId, preferencesData.id, updatedPref);
                                                            await loadPreferences(preferencesData.clientId);
                                                            setIsModalOpen(false);
                                                        } catch (e) {
                                                            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
                                                        }
                                                    }}
                                                />
                                            )}

                                        </div>
                                    )) : <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>}
                                </td>
                            </tr>
                        )}
                    </React.Fragment>
                ))}
                </tbody>
            </table>

            {editingClient && (
                <div className="modal">
                    <div className="modal-content">
                        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</h3>
                        <form onSubmit={handleUpdateClient}>
                            <label>–ò–º—è:
                                <input
                                    type="text"
                                    value={editingClient.authUser.firstname}
                                    onChange={(e) => handleEditField("authUser.firstname", e.target.value)}
                                />
                            </label>
                            <label>–§–∞–º–∏–ª–∏—è:
                                <input
                                    type="text"
                                    value={editingClient.authUser.lastname}
                                    onChange={(e) => handleEditField("authUser.lastname", e.target.value)}
                                />
                            </label>
                            <label>Email:
                                <input
                                    type="email"
                                    value={editingClient.authUser.email}
                                    onChange={(e) => handleEditField("authUser.email", e.target.value)}
                                />
                            </label>
                            <label>–ü–∞—Ä–æ–ª—å:
                                <input
                                    type="password"
                                    value={editingClient.authUser.password || ''}
                                    onChange={(e) => handleEditField("authUser.password", e.target.value)}
                                />
                            </label>
                            <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:
                                <select
                                    value={editingClient.accessLevel || ""}
                                    onChange={(e) => handleEditField("accessLevel", e.target.value)}
                                >
                                    <option value="">-- –≤—ã–±—Ä–∞—Ç—å --</option>
                                    {statusList.map((status) => (
                                        <option key={status} value={status}>{status}</option>
                                    ))}
                                </select>
                            </label>
                            <label>–¢–µ–ª–µ—Ñ–æ–Ω:
                                <input
                                    type="text"
                                    value={editingClient.phone || ""}
                                    onChange={(e) =>
                                        setEditingClient({
                                            ...editingClient,
                                            phone: e.target.value
                                        })
                                    }
                                />
                            </label>

                            <label>–ü–∞—Å–ø–æ—Ä—Ç:
                                <input
                                    type="text"
                                    value={editingClient.passport || ""}
                                    onChange={(e) =>
                                        setEditingClient({
                                            ...editingClient,
                                            passport: e.target.value
                                        })
                                    }
                                />
                            </label>


                            <div className="modal-buttons">
                                <button type="submit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                                <button type="button" onClick={() => setEditingClient(null)}>‚úñ –û—Ç–º–µ–Ω–∞</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
            <div>
            </div>

        </div>
    );
};

export default ClientList;
