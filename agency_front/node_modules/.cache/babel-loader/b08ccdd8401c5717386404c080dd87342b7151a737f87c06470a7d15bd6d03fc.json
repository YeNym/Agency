{"ast":null,"code":"import api from './axiosConfig';\nexport const getAllProperties = async () => {\n  const response = await api.get('/properties');\n  return response.data;\n};\nexport const createProperty = async formData => {\n  const response = await api.post('/properties', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// Получение enum значений с бэка (если нужно)\nexport const getPropertyEnums = async () => {\n  const response = await api.get('/properties/enums');\n  return response.data;\n};\nexport const getStatusReques = async formData => {\n  const response = await api.get('/travel-requests/enums');\n};\nexport const getPropertiesByManagerId = async managerId => {\n  const response = await api.get(`/properties/find-by-managers/${managerId}`);\n  return response.data;\n};\nexport const searchProperties = async params => {\n  const response = await api.get('/properties/search', {\n    params\n  });\n  return response.data;\n};\nexport const getTravelProperties = async () => {\n  const response = await api.get('/properties/travel');\n  return response.data;\n};\nexport const getPropertyById = async id => {\n  const response = await api.get(`/properties/${id}`);\n  console.log('Ответ от сервера:', response);\n  return response.data;\n};\nexport const updateProperty = async (id, propertyData) => {\n  try {\n    const response = await api.put(`/properties/${id}`, propertyData);\n    return response.data;\n  } catch (error) {\n    console.error('Ошибка при обновлении недвижимости:', error);\n    throw error;\n  }\n};\nexport const deleteProperty = async id => {\n  const response = await api.delete(`/properties/${id}`);\n  return response.data;\n};","map":{"version":3,"names":["api","getAllProperties","response","get","data","createProperty","formData","post","headers","getPropertyEnums","getStatusReques","getPropertiesByManagerId","managerId","searchProperties","params","getTravelProperties","getPropertyById","id","console","log","updateProperty","propertyData","put","error","deleteProperty","delete"],"sources":["D:/study/Agency/agency_front/src/api/propertyService.js"],"sourcesContent":["import api from './axiosConfig';\r\n\r\nexport const getAllProperties = async () => {\r\n    const response = await api.get('/properties');\r\n    return response.data;\r\n};\r\n\r\nexport const createProperty = async (formData) => {\r\n    const response = await api.post('/properties', formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    });\r\n    return response.data;\r\n};\r\n\r\n// Получение enum значений с бэка (если нужно)\r\nexport const getPropertyEnums = async () => {\r\n    const response = await api.get('/properties/enums');\r\n    return response.data;\r\n};\r\n\r\nexport const getStatusReques = async (formData) => {\r\n    const response = await api.get('/travel-requests/enums');\r\n\r\n}\r\n\r\nexport const getPropertiesByManagerId = async (managerId) => {\r\n    const response = await api.get(`/properties/find-by-managers/${managerId}`);\r\n    return response.data;\r\n};\r\n\r\nexport const searchProperties = async (params) => {\r\n    const response = await api.get('/properties/search', { params });\r\n    return response.data;\r\n};\r\nexport const getTravelProperties = async () => {\r\n    const response = await api.get('/properties/travel');\r\n    return response.data;\r\n};\r\n\r\nexport const getPropertyById = async (id) => {\r\n    const response = await api.get(`/properties/${id}`);\r\n    console.log('Ответ от сервера:', response);\r\n    return response.data;\r\n};\r\n\r\nexport const updateProperty = async (id, propertyData) => {\r\n    try {\r\n        const response = await api.put(`/properties/${id}`, propertyData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Ошибка при обновлении недвижимости:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteProperty = async (id) => {\r\n    const response = await api.delete(`/properties/${id}`);\r\n    return response.data;\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,eAAe;AAE/B,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,aAAa,CAAC;EAC7C,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMJ,QAAQ,GAAG,MAAMF,GAAG,CAACO,IAAI,CAAC,aAAa,EAAED,QAAQ,EAAE;IACrDE,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EACF,OAAON,QAAQ,CAACE,IAAI;AACxB,CAAC;;AAED;AACA,OAAO,MAAMK,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMP,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,mBAAmB,CAAC;EACnD,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,MAAOJ,QAAQ,IAAK;EAC/C,MAAMJ,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,wBAAwB,CAAC;AAE5D,CAAC;AAED,OAAO,MAAMQ,wBAAwB,GAAG,MAAOC,SAAS,IAAK;EACzD,MAAMV,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,gCAAgCS,SAAS,EAAE,CAAC;EAC3E,OAAOV,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMS,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EAC9C,MAAMZ,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,oBAAoB,EAAE;IAAEW;EAAO,CAAC,CAAC;EAChE,OAAOZ,QAAQ,CAACE,IAAI;AACxB,CAAC;AACD,OAAO,MAAMW,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMb,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,oBAAoB,CAAC;EACpD,OAAOD,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMY,eAAe,GAAG,MAAOC,EAAE,IAAK;EACzC,MAAMf,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,eAAec,EAAE,EAAE,CAAC;EACnDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEjB,QAAQ,CAAC;EAC1C,OAAOA,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMgB,cAAc,GAAG,MAAAA,CAAOH,EAAE,EAAEI,YAAY,KAAK;EACtD,IAAI;IACA,MAAMnB,QAAQ,GAAG,MAAMF,GAAG,CAACsB,GAAG,CAAC,eAAeL,EAAE,EAAE,EAAEI,YAAY,CAAC;IACjE,OAAOnB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACZL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOP,EAAE,IAAK;EACxC,MAAMf,QAAQ,GAAG,MAAMF,GAAG,CAACyB,MAAM,CAAC,eAAeR,EAAE,EAAE,CAAC;EACtD,OAAOf,QAAQ,CAACE,IAAI;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}