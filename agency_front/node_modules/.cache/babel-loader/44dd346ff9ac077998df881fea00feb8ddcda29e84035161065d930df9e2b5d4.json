{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\Agency\\\\agency_front\\\\src\\\\constants\\\\ExcelReportGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { utils, writeFile } from 'xlsx';\nimport { getClientsByManager, getHousingPreferences, getUserByClientId } from '../api/ClientService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelReportButton = ({\n  managerId\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const handleDownload = async () => {\n    try {\n      setIsLoading(true);\n      const clients = await getClientsByManager(managerId);\n      const data = await Promise.all(clients.map(async client => {\n        const [userData, preferences] = await Promise.all([getClientUser(client.id),\n        // Запрашиваем данные пользователя\n        getClientPreferences(client.id)]);\n        return {\n          ...client,\n          ...userData,\n          // Добавляем данные из getUserByClientId\n          preferences\n        };\n      }));\n      console.log(clients);\n      // 3. Формируем Excel файл\n      const worksheet = utils.json_to_sheet(data.map(client => ({\n        'ФИО': client.fullName,\n        'Телефон': client.phone,\n        'Email': client.email,\n        'Предпочтения': client.preferences.join(', '),\n        'Дата регистрации': new Date(client.createdAt).toLocaleDateString()\n      })));\n      const workbook = utils.book_new();\n      utils.book_append_sheet(workbook, worksheet, 'Клиенты');\n\n      // 4. Скачиваем файл\n      writeFile(workbook, `clients_report_${new Date().toISOString().slice(0, 10)}.xlsx`);\n    } catch (error) {\n      console.error('Ошибка:', error);\n      alert('Не удалось сформировать отчет');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleDownload,\n    disabled: isLoading,\n    style: {\n      padding: '10px 20px',\n      background: isLoading ? '#ccc' : '#2196F3',\n      color: 'white',\n      border: 'none',\n      borderRadius: '4px',\n      cursor: 'pointer'\n    },\n    children: isLoading ? 'Формируем отчет...' : 'Скачать отчет в Excel'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(ExcelReportButton, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = ExcelReportButton;\nconst getClientUser = async clientId => {\n  try {\n    const userData = await getUserByClientId(clientId);\n\n    // Формируем полное имя\n    const fullNameParts = [userData.lastname, userData.firstname, userData.patronymic].filter(Boolean); // Удаляем пустые/undefined значения\n\n    return {\n      fullName: fullNameParts.join(' ') || 'Не указано',\n      phone: userData.phone,\n      email: userData.email\n    };\n  } catch (e) {\n    console.error(`Ошибка для клиента ${clientId}:`, e);\n    return {\n      fullName: 'Не указано',\n      phone: 'Не указано',\n      email: 'Не указано'\n    };\n  }\n};\n\n// Вспомогательная функция для получения предпочтений\nconst getClientPreferences = async clientId => {\n  try {\n    const preferences = await getHousingPreferences(clientId);\n    return preferences.map(p => p.name);\n  } catch (e) {\n    console.error(`Ошибка для клиента ${clientId}:`, e);\n    return ['не указано'];\n  }\n};\nexport default ExcelReportButton;\nvar _c;\n$RefreshReg$(_c, \"ExcelReportButton\");","map":{"version":3,"names":["React","useState","utils","writeFile","getClientsByManager","getHousingPreferences","getUserByClientId","jsxDEV","_jsxDEV","ExcelReportButton","managerId","_s","isLoading","setIsLoading","handleDownload","clients","data","Promise","all","map","client","userData","preferences","getClientUser","id","getClientPreferences","console","log","worksheet","json_to_sheet","fullName","phone","email","join","Date","createdAt","toLocaleDateString","workbook","book_new","book_append_sheet","toISOString","slice","error","alert","onClick","disabled","style","padding","background","color","border","borderRadius","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","clientId","fullNameParts","lastname","firstname","patronymic","filter","Boolean","e","p","name","$RefreshReg$"],"sources":["D:/study/Agency/agency_front/src/constants/ExcelReportGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { utils, writeFile } from 'xlsx';\r\nimport { getClientsByManager, getHousingPreferences, getUserByClientId } from '../api/ClientService';\r\n\r\nconst ExcelReportButton = ({ managerId }) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleDownload = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const clients = await getClientsByManager(managerId);\r\n\r\n            const data = await Promise.all(\r\n                clients.map(async (client) => {\r\n                    const [userData, preferences] = await Promise.all([\r\n                        getClientUser(client.id), // Запрашиваем данные пользователя\r\n                        getClientPreferences(client.id)\r\n                    ]);\r\n\r\n                    return {\r\n                        ...client,\r\n                        ...userData, // Добавляем данные из getUserByClientId\r\n                        preferences\r\n                    };\r\n                })\r\n            );\r\n            console.log(clients)\r\n            // 3. Формируем Excel файл\r\n            const worksheet = utils.json_to_sheet(\r\n                data.map(client => ({\r\n                    'ФИО': client.fullName,\r\n                    'Телефон': client.phone,\r\n                    'Email': client.email,\r\n                    'Предпочтения': client.preferences.join(', '),\r\n                    'Дата регистрации': new Date(client.createdAt).toLocaleDateString()\r\n                }))\r\n            );\r\n\r\n            const workbook = utils.book_new();\r\n            utils.book_append_sheet(workbook, worksheet, 'Клиенты');\r\n\r\n            // 4. Скачиваем файл\r\n            writeFile(workbook, `clients_report_${new Date().toISOString().slice(0,10)}.xlsx`);\r\n\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n            alert('Не удалось сформировать отчет');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <button\r\n            onClick={handleDownload}\r\n            disabled={isLoading}\r\n            style={{\r\n                padding: '10px 20px',\r\n                background: isLoading ? '#ccc' : '#2196F3',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer'\r\n            }}\r\n        >\r\n            {isLoading ? 'Формируем отчет...' : 'Скачать отчет в Excel'}\r\n        </button>\r\n    );\r\n};\r\n\r\nconst getClientUser = async (clientId) => {\r\n    try {\r\n        const userData = await getUserByClientId(clientId);\r\n\r\n        // Формируем полное имя\r\n        const fullNameParts = [\r\n            userData.lastname,\r\n            userData.firstname,\r\n            userData.patronymic\r\n\r\n        ].filter(Boolean); // Удаляем пустые/undefined значения\r\n\r\n        return {\r\n            fullName: fullNameParts.join(' ') || 'Не указано',\r\n            phone: userData.phone,\r\n            email: userData.email\r\n        };\r\n    } catch (e) {\r\n        console.error(`Ошибка для клиента ${clientId}:`, e);\r\n        return {\r\n            fullName: 'Не указано',\r\n            phone: 'Не указано',\r\n            email: 'Не указано'\r\n        };\r\n    }\r\n};\r\n\r\n// Вспомогательная функция для получения предпочтений\r\nconst getClientPreferences = async (clientId) => {\r\n    try {\r\n        const preferences = await getHousingPreferences(clientId);\r\n        return preferences.map(p => p.name);\r\n    } catch (e) {\r\n        console.error(`Ошибка для клиента ${clientId}:`, e);\r\n        return ['не указано'];\r\n    }\r\n};\r\n\r\nexport default ExcelReportButton;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}